/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as MainImport } from './routes/_main'

// Create Virtual Routes

const MainIndexLazyImport = createFileRoute('/_main/')()
const authLoginLazyImport = createFileRoute('/(auth)/login')()
const MainSousTraitantIndexLazyImport = createFileRoute(
  '/_main/sous-traitant/',
)()
const MainRgeIndexLazyImport = createFileRoute('/_main/rge/')()
const MainForfaitIndexLazyImport = createFileRoute('/_main/forfait/')()
const MainEntiteExterneIndexLazyImport = createFileRoute(
  '/_main/entite-externe/',
)()
const MainDevisIndexLazyImport = createFileRoute('/_main/devis/')()
const MainClientsIndexLazyImport = createFileRoute('/_main/clients/')()
const MainClientsNewLazyImport = createFileRoute('/_main/clients/new')()

// Create/Update Routes

const MainRoute = MainImport.update({
  id: '/_main',
  getParentRoute: () => rootRoute,
} as any)

const MainIndexLazyRoute = MainIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => MainRoute,
} as any).lazy(() => import('./routes/_main/index.lazy').then((d) => d.Route))

const authLoginLazyRoute = authLoginLazyImport
  .update({
    id: '/(auth)/login',
    path: '/login',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(auth)/login.lazy').then((d) => d.Route))

const MainSousTraitantIndexLazyRoute = MainSousTraitantIndexLazyImport.update({
  id: '/sous-traitant/',
  path: '/sous-traitant/',
  getParentRoute: () => MainRoute,
} as any).lazy(() =>
  import('./routes/_main/sous-traitant/index.lazy').then((d) => d.Route),
)

const MainRgeIndexLazyRoute = MainRgeIndexLazyImport.update({
  id: '/rge/',
  path: '/rge/',
  getParentRoute: () => MainRoute,
} as any).lazy(() =>
  import('./routes/_main/rge/index.lazy').then((d) => d.Route),
)

const MainForfaitIndexLazyRoute = MainForfaitIndexLazyImport.update({
  id: '/forfait/',
  path: '/forfait/',
  getParentRoute: () => MainRoute,
} as any).lazy(() =>
  import('./routes/_main/forfait/index.lazy').then((d) => d.Route),
)

const MainEntiteExterneIndexLazyRoute = MainEntiteExterneIndexLazyImport.update(
  {
    id: '/entite-externe/',
    path: '/entite-externe/',
    getParentRoute: () => MainRoute,
  } as any,
).lazy(() =>
  import('./routes/_main/entite-externe/index.lazy').then((d) => d.Route),
)

const MainDevisIndexLazyRoute = MainDevisIndexLazyImport.update({
  id: '/devis/',
  path: '/devis/',
  getParentRoute: () => MainRoute,
} as any).lazy(() =>
  import('./routes/_main/devis/index.lazy').then((d) => d.Route),
)

const MainClientsIndexLazyRoute = MainClientsIndexLazyImport.update({
  id: '/clients/',
  path: '/clients/',
  getParentRoute: () => MainRoute,
} as any).lazy(() =>
  import('./routes/_main/clients/index.lazy').then((d) => d.Route),
)

const MainClientsNewLazyRoute = MainClientsNewLazyImport.update({
  id: '/clients/new',
  path: '/clients/new',
  getParentRoute: () => MainRoute,
} as any).lazy(() =>
  import('./routes/_main/clients/new.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_main': {
      id: '/_main'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MainImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/_main/': {
      id: '/_main/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof MainIndexLazyImport
      parentRoute: typeof MainImport
    }
    '/_main/clients/new': {
      id: '/_main/clients/new'
      path: '/clients/new'
      fullPath: '/clients/new'
      preLoaderRoute: typeof MainClientsNewLazyImport
      parentRoute: typeof MainImport
    }
    '/_main/clients/': {
      id: '/_main/clients/'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof MainClientsIndexLazyImport
      parentRoute: typeof MainImport
    }
    '/_main/devis/': {
      id: '/_main/devis/'
      path: '/devis'
      fullPath: '/devis'
      preLoaderRoute: typeof MainDevisIndexLazyImport
      parentRoute: typeof MainImport
    }
    '/_main/entite-externe/': {
      id: '/_main/entite-externe/'
      path: '/entite-externe'
      fullPath: '/entite-externe'
      preLoaderRoute: typeof MainEntiteExterneIndexLazyImport
      parentRoute: typeof MainImport
    }
    '/_main/forfait/': {
      id: '/_main/forfait/'
      path: '/forfait'
      fullPath: '/forfait'
      preLoaderRoute: typeof MainForfaitIndexLazyImport
      parentRoute: typeof MainImport
    }
    '/_main/rge/': {
      id: '/_main/rge/'
      path: '/rge'
      fullPath: '/rge'
      preLoaderRoute: typeof MainRgeIndexLazyImport
      parentRoute: typeof MainImport
    }
    '/_main/sous-traitant/': {
      id: '/_main/sous-traitant/'
      path: '/sous-traitant'
      fullPath: '/sous-traitant'
      preLoaderRoute: typeof MainSousTraitantIndexLazyImport
      parentRoute: typeof MainImport
    }
  }
}

// Create and export the route tree

interface MainRouteChildren {
  MainIndexLazyRoute: typeof MainIndexLazyRoute
  MainClientsNewLazyRoute: typeof MainClientsNewLazyRoute
  MainClientsIndexLazyRoute: typeof MainClientsIndexLazyRoute
  MainDevisIndexLazyRoute: typeof MainDevisIndexLazyRoute
  MainEntiteExterneIndexLazyRoute: typeof MainEntiteExterneIndexLazyRoute
  MainForfaitIndexLazyRoute: typeof MainForfaitIndexLazyRoute
  MainRgeIndexLazyRoute: typeof MainRgeIndexLazyRoute
  MainSousTraitantIndexLazyRoute: typeof MainSousTraitantIndexLazyRoute
}

const MainRouteChildren: MainRouteChildren = {
  MainIndexLazyRoute: MainIndexLazyRoute,
  MainClientsNewLazyRoute: MainClientsNewLazyRoute,
  MainClientsIndexLazyRoute: MainClientsIndexLazyRoute,
  MainDevisIndexLazyRoute: MainDevisIndexLazyRoute,
  MainEntiteExterneIndexLazyRoute: MainEntiteExterneIndexLazyRoute,
  MainForfaitIndexLazyRoute: MainForfaitIndexLazyRoute,
  MainRgeIndexLazyRoute: MainRgeIndexLazyRoute,
  MainSousTraitantIndexLazyRoute: MainSousTraitantIndexLazyRoute,
}

const MainRouteWithChildren = MainRoute._addFileChildren(MainRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof MainRouteWithChildren
  '/login': typeof authLoginLazyRoute
  '/': typeof MainIndexLazyRoute
  '/clients/new': typeof MainClientsNewLazyRoute
  '/clients': typeof MainClientsIndexLazyRoute
  '/devis': typeof MainDevisIndexLazyRoute
  '/entite-externe': typeof MainEntiteExterneIndexLazyRoute
  '/forfait': typeof MainForfaitIndexLazyRoute
  '/rge': typeof MainRgeIndexLazyRoute
  '/sous-traitant': typeof MainSousTraitantIndexLazyRoute
}

export interface FileRoutesByTo {
  '/login': typeof authLoginLazyRoute
  '/': typeof MainIndexLazyRoute
  '/clients/new': typeof MainClientsNewLazyRoute
  '/clients': typeof MainClientsIndexLazyRoute
  '/devis': typeof MainDevisIndexLazyRoute
  '/entite-externe': typeof MainEntiteExterneIndexLazyRoute
  '/forfait': typeof MainForfaitIndexLazyRoute
  '/rge': typeof MainRgeIndexLazyRoute
  '/sous-traitant': typeof MainSousTraitantIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_main': typeof MainRouteWithChildren
  '/(auth)/login': typeof authLoginLazyRoute
  '/_main/': typeof MainIndexLazyRoute
  '/_main/clients/new': typeof MainClientsNewLazyRoute
  '/_main/clients/': typeof MainClientsIndexLazyRoute
  '/_main/devis/': typeof MainDevisIndexLazyRoute
  '/_main/entite-externe/': typeof MainEntiteExterneIndexLazyRoute
  '/_main/forfait/': typeof MainForfaitIndexLazyRoute
  '/_main/rge/': typeof MainRgeIndexLazyRoute
  '/_main/sous-traitant/': typeof MainSousTraitantIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/'
    | '/clients/new'
    | '/clients'
    | '/devis'
    | '/entite-externe'
    | '/forfait'
    | '/rge'
    | '/sous-traitant'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/'
    | '/clients/new'
    | '/clients'
    | '/devis'
    | '/entite-externe'
    | '/forfait'
    | '/rge'
    | '/sous-traitant'
  id:
    | '__root__'
    | '/_main'
    | '/(auth)/login'
    | '/_main/'
    | '/_main/clients/new'
    | '/_main/clients/'
    | '/_main/devis/'
    | '/_main/entite-externe/'
    | '/_main/forfait/'
    | '/_main/rge/'
    | '/_main/sous-traitant/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  MainRoute: typeof MainRouteWithChildren
  authLoginLazyRoute: typeof authLoginLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  MainRoute: MainRouteWithChildren,
  authLoginLazyRoute: authLoginLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_main",
        "/(auth)/login"
      ]
    },
    "/_main": {
      "filePath": "_main.tsx",
      "children": [
        "/_main/",
        "/_main/clients/new",
        "/_main/clients/",
        "/_main/devis/",
        "/_main/entite-externe/",
        "/_main/forfait/",
        "/_main/rge/",
        "/_main/sous-traitant/"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.lazy.tsx"
    },
    "/_main/": {
      "filePath": "_main/index.lazy.tsx",
      "parent": "/_main"
    },
    "/_main/clients/new": {
      "filePath": "_main/clients/new.lazy.tsx",
      "parent": "/_main"
    },
    "/_main/clients/": {
      "filePath": "_main/clients/index.lazy.tsx",
      "parent": "/_main"
    },
    "/_main/devis/": {
      "filePath": "_main/devis/index.lazy.tsx",
      "parent": "/_main"
    },
    "/_main/entite-externe/": {
      "filePath": "_main/entite-externe/index.lazy.tsx",
      "parent": "/_main"
    },
    "/_main/forfait/": {
      "filePath": "_main/forfait/index.lazy.tsx",
      "parent": "/_main"
    },
    "/_main/rge/": {
      "filePath": "_main/rge/index.lazy.tsx",
      "parent": "/_main"
    },
    "/_main/sous-traitant/": {
      "filePath": "_main/sous-traitant/index.lazy.tsx",
      "parent": "/_main"
    }
  }
}
ROUTE_MANIFEST_END */
